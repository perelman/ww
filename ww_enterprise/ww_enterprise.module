<?php
drupal_set_time_limit(3600);
define('WW_ENTERPRISE_CONTENT_TYPE', 'ww_enterprise');
include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'ww_enterprise') . '/ww_enterprise_story.inc';
/**
 * Implementation of hook_xmlrpc()
 */

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function ww_enterprise_xmlrpc() {

  $xmlrpc = array();

  $xmlrpc[] = array(
    'enterprise.nodePublish',
    'ww_enterprise_xmlrpc_nodePublish',
    array('struct', 'struct', 'struct', 'array', 'array', 'array', 'array', 'array', 'int', 'int', 'array', 'struct', 'struct', 'boolean', 'struct'),
    t(''),
  );

  $xmlrpc[] = array(
    'enterprise.nodeUpdate',
    'ww_enterprise_xmlrpc_nodeUpdate',
    array('struct', 'struct', 'int', 'struct', 'array', 'array', 'array', 'array', 'struct', 'struct', 'struct'),
    t(''),
  );

  $xmlrpc[] = array(
    'enterprise.nodeGetInfo',
    'ww_enterprise_xmlrpc_nodeGetInfo',
    array('struct', 'int'),
    t(''),
  );

  $xmlrpc[] = array(
    'enterprise.nodeUnpublish',
    'ww_enterprise_xmlrpc_nodeUnpublish',
    array('struct', 'struct', 'int', 'array', 'struct'),
    t(''),
  );

  $xmlrpc[] = array(
    'enterprise.testConfig',
    'ww_enterprise_xmlrpc_testConfig',
    array('struct', 'struct'),
    t(''),
  );

  $xmlrpc[] = array(
    'enterprise.getFileId',
    'ww_enterprise_xmlrpc_getFileId',
    array('struct', 'struct'),
    t(''),
  );

  $xmlrpc[] = array(
    'enterprise.getContentTypes',
    'ww_enterprise_xmlrpc_getContentTypes',
    array('struct', 'struct'),
    t(''),
  );

  $xmlrpc[] = array(
    'enterprise.getVocabularies',
    'ww_enterprise_xmlrpc_getVocabularies',
    array('struct', 'struct', 'string'),
    t(''),
  );

  $xmlrpc[] = array(
    'enterprise.getTerms',
    'ww_enterprise_xmlrpc_getTerms',
    array('struct', 'struct', 'struct'),
    t(''),
  );

  $xmlrpc[] = array(
    'enterprise.getUrl',
    'ww_enterprise_xmlrpc_getUrl',
    array('string', 'string'),
    t(''),
  );

  $xmlrpc[] = array(
    'enterprise.getCurrentDataForGetDialog',
    'ww_enterprise_xmlrpc_getCurrentDataForGetDialog',
    array('struct','struct', 'string', 'string', 'array'),
    t(''),
  );

  return $xmlrpc;

}

/**
 * Implements hook_block_info().
 */
function ww_enterprise_block_info() {
  // TODO Rename block deltas (e.g. delta-0) to readable strings. // If $op is "list", we just need to return a list of block descriptions.
  $blocks['delta-0']['info'] = t('Attached images');
  $blocks['delta-1']['info'] = t('Attached images');
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function ww_enterprise_block_configure($delta) {
  // Do nothing
  return null;
}

/**
 * Implements hook_block_save().
 */
function ww_enterprise_block_save($delta, $edit) {
  // Do nothing
  return null;
}

/**
 * Implements hook_block_view().
 */
function ww_enterprise_block_view($delta) {
  // TODO Rename block deltas (e.g. delta-0) to readable strings.
  switch ($delta) {
    case 'delta-1':
      $block['subject'] = t('Attached images');
      $block['content'] = block_ww_enterprise_contents(1);
      break;
  }
  return $block;
}

/**
 * Implements hook_block()().
 */
function ww_enterprise_block_OLD($op = 'list', $delta = 0, $edit = array()) {
  // TODO Remaining code in this function needs to be moved to the appropriate new hook function.
  $edit = $edit; // keep analyzer happy
  return null;
}

/**
 * Implementation of hook_contents()
 */
function block_ww_enterprise_contents($which_block) {
  if ($which_block == 1) {
    // Load attached images
    if ( arg(0) == 'node' && is_numeric(arg(1)) && ! arg(2) ) { // basic url check
      $node = node_load(arg(1)); //get node id
      //@TODO:fix the image attach.
      return;
      $result = db_query('SELECT iid FROM {image_attach} WHERE nid = :nid', array(':nid' => $node->nid)); // select all the images attached to this node
      $output = "";
      foreach ($result as $r) {
        $image = node_load($r->iid); // open image node
        $output .= '<div class="image-attach">';
        $output .= l(image_display($image, 'thumbnail'), "node/$r->iid", array('html' => TRUE)); // show a link to the image node
        $output .= '</div>' . "<br>\n"; //
        
      }
      return $output;
    }
  }
  return null;
}

// Callback functions

// !!! A good queue processor should be written and used instead of importVideo / importAudio functions in production

// THESE FUNCTIONS AREN'T USED!!!

/**
 * Import video node - TBD
 *
 * @param int $node Drupal node ID
 * @param binary $content File data
 * @param string $fileName Name of the source file
 * @param string $ratio Video ratio ('3_4' for 3:4 and '16_9' for 16:9)
 * @param string $tempDir Path to temporary directory on web server
 * @param string $drupalDir Path to Drupal directory on web server
 *
 * @return int node id
 *
 */
function importVideo($node, $content, $fileName, $ratio, $tempDir, $drupalDir) {
  // keep analyzer happy
  $node = $node;
  $content = $content;

  $return = 0;
  switch ($ratio) {
    case '3_4':
      system("/usr/bin/ffmpeg -i /var/www/" . $tempDir . "/" . $fileName . " -b 200000 -r 25 -s 320x240 -y -ar 22050 /var/www/" . $drupalDir . $fileName . ".flv", $return);
      break;
    case '16_9':
      system("/usr/bin/ffmpeg -i /var/www/" . $tempDir . "/" . $fileName . " -b 200000 -r 25 -s 320x180 -padtop 30 -padbottom 30 -y -ar 22050 /var/www/" . $drupalDir . $fileName . ".flv", $return);
      break;
  }
  if ($return || !file_exists($drupalDir . $fileName . ".flv")) {
    // Report error - TBD
    return;
  } // else Create Drupal node - TBD
}

/**
 * Import audio node - TBD
 *
 * @param int $node Drupal node ID
 * @param binary $content File data
 * @param string $fileName Name of the source file
 * @param string $tempDir Path to temporary directory on web server
 * @param string $drupalDir Path to Drupal directory on web server
 *
 * @return int node id
 *
 */
function importAudio($node, $content, $fileName, $tempDir, $drupalDir) {
  // keep analyzer happy
  $node = $node;
  $content = $content;

  $return = 0;
  system("/usr/bin/lame --mp3input -b 96 /var/www/" . $tempDir . "/" . $fileName . " /var/www/" . $drupalDir . $fileName . ".mp3", $return);
  if ($return || !file_exists($drupalDir . $fileName . ".mp3")) {
    // Report error - TBD
    return;
  } // else Create Drupal node - TBD
}

/**
 * Logs on to Drupal and sets the global user
 * Throws an Exception if the logon fails.
 *
 * @param array $logOnParams
 */
function ww_enterprise_logOn($logOnParams) {
  $password = base64_decode($logOnParams['password']);
  // log on
  $uid = user_authenticate($logOnParams['username'], $password);
  if ($uid) {
    global $user;
    $user = user_load($uid);
    user_login_finalize();
  }
  else {
    throw new Exception(t('Error logging on'));
  }
}

/**
 * Deletes the old previews from the database ww_enterprise_preview table that are older than one hour.
 *
 */
function deleteOldPreviews() {
  $timeLimit = REQUEST_TIME - 1 * 60 * 60; // 1 hour

  $result = db_query("SELECT vid, nid, hash FROM {ww_enterprise_preview} WHERE date < :date", array(':date' => $timeLimit));
  foreach ($result as $r) {
    $nid = $node->nid;
    node_delete($nid);
    db_delete('ww_enterprise_preview')
    ->condition('nid', $nid)
    ->execute();
  }
}

/**
 * Set only new keywords in keywords key/value array
 *
 * @param array $keywords resulting keyword key/value array e.g. array("keyword1"=>1, "keyword2"=>1)
 * @param array $array new values (e.g. array("keyword1", "keyword2") )
 */
function ww_enterprise_setKeywords(&$keywords, $array) {
  foreach ($array as $key) {
    if (! isset($keywords[$key])) {
      $keywords[$key] = true;
    }
  }
}

/**
 * Import images into Drupal as image nodes.
 *
 * @param array $images
 * @param array $idArray
 * @return array of image nodes
 */
function importImages($images, $publish, &$idArray, &$keywords) {
  $imageNodes = array();
  foreach ($images as $image) {
    // in case of an update the iid is set and the old image node can be removed
    if (isset($image['iid']) && $image['iid']) {
      node_delete($image['iid']);
    }

    $dest = tempnam(realpath(file_directory_temp()), $image['name']) . $image['ext'];
    $filePath = file_save_data(base64_decode($image['contents']), $dest);
    $inode = image_create_node_from($filePath, $image['name']);
    if ($inode) {
      if (! $publish) {
        // set status to unpulished
        //TODO check if can set the status easier
        $node = node_load($inode->nid);
        $node->status = $publish;
        node_save($node);
      }
      $imageNodes[] = $inode;
      $idArray[$image['enterprise_id']] = $inode->nid;
      ww_enterprise_setKeywords($keywords, $image['keywords']);
    }
  }

  return $imageNodes;
}

/**
 * Create image nodes and attach them to the node.
 *
 * @param array $file the incomming file
 * @param object &$fileObj file object
 * @param object &$node node object
 * @param object &$inode image node object
 */
function ww_enterprise_attachImage($file, &$fileObj, &$node, &$inode = null) {
  $id = 0;
  // in case of an update the iid is set and the old image node can be removed. Have to check if node is still present.
  // Check is needed because 'unplublished images' are removed from drupal when they are replaced by by a new one. BZ#20980-82.
  if (isset($file['iid']) && $file['iid'] && node_load($file['iid'])) {
    // only first image is an image attachment old behaviour with the old image drupal plugin
    if (! $node->iid) {
      $node->iid = $file['iid'];
    }

    // Add the actual id to the array
    $node->iids[] = $file['iid'];

    /*
     Updating the image is done in several steps:
     1. The image node is loaded.
     2. On the node set the _original path to the newly uploaded image and set the new_file attribute
     to true. This triggers the image_update method to remove the old stuff and replace it by the new image.
     3. Unset the new_file attribuut and set the rebuild_image attribuut. This triggers image_update to generate the
     thumbnail/preview of the new image.
     4. Cleanup the files tables.
     */
    if ($fileObj->filename != IMAGE_ORIGINAL) {
      $inode = node_load($file['iid']);
      $inode->new_file = true;
      $inode->images[IMAGE_ORIGINAL] = $fileObj->filepath;
      node_invoke($inode, 'update');
      $inode->rebuild_images = true;
      unset($inode->new_file);
      node_invoke($inode, 'update');
      // TODO Please review the conversion of this statement to the D7 database API syntax.
      /* db_query("DELETE FROM {files} WHERE fid = %d", $file['fid']) */
      db_delete('files')
  ->condition('fid', $file['fid'])
  ->execute();
    }
    return $file['iid'];

    // Old behaviour
    //watchdog('content', 'Delete node with iid: ' . $file['iid'], array(), WATCHDOG_NOTICE);
    //node_delete($file['iid']);
  }

  watchdog('content', 'image_create_node_from with filepath: ' . $fileObj->filepath . ' name: ' . $file['name'], array(), WATCHDOG_NOTICE);
  $inode = image_create_node_from($fileObj->filepath, $file['name']);
  if ($inode) {
    // delete from files table because image_create_node_from has moved file and created new entry
    watchdog('content', 'Delete file with fid: ' . $fileObj->fid, array(), WATCHDOG_NOTICE);
    // TODO Please review the conversion of this statement to the D7 database API syntax.
    /* db_query('DELETE FROM {files} WHERE fid = %d', $fileObj->fid) */
    db_delete('files')
  ->condition('fid', $fileObj->fid)
  ->execute();
    /* NOT USED NOW
     //TODO If it is a preview don't publish the images
     if (! $publish) {
     // set status to unpulished
     //TODO check if can set the status easier
     $inode2 = node_load($inode->nid);
     $inode2->status = $publish;
     node_save($inode2);
     }
     */
    $id = $inode->nid;

    // only first image is an image attachment old behaviour with the old image drupal plugin
    if (! $node->iid) {
      $node->iid = $id;
    }

    // Add the actual id to the array
    $node->iids[] = $id;
  }

  return $id;
}

/**
 * Add a file object to the node so it is saved as an attachment.
 *
 * @param object $file
 * @param object $fileObj
 * @param object $node
 * @return int file id
 */
function ww_enterprise_attachFile($file, &$fileObj, &$node) {
  // keep analyzer happy
  $file = $file;

  // extra properties for upload module
  $fileObj->list = 1;
  $fileObj->new = TRUE;
  $node->files[$fileObj->fid] = $fileObj;

  return $fileObj->fid;
}

/**
 * Attach multiple files to an node.
 *
 * @param array $files
 * @param array $idArray
 * @param array $keywords
 * @param object $node
 * @param array $imageNodes
 */
function ww_enterprise_attachFiles($files, &$idArray, &$keywords, &$node, &$imageNodes) {
  static $imageTypes = array(
    'image/jpeg' => true,
    'image/jpg' => true,
    'image/gif' => true,
    'image/png' => true,
  );

  // remove current attachments
  $node->iid = null;
  // The new image attach array. First entry must be present. This is a dummy that gets unset by the image_attach module.
  $node->iids = array('- None -');

  if (isset($node->files)) {
    // Set the current files to remove. If a file is reattached then the file isn't deleted.
    foreach ($node->files as &$oldFile) {
      $oldFile->remove = true;
    }
  }

  foreach ($files as $file) {
    $fid = isset($file['fid']) ? intval($file['fid']) : 0;
    $fileObj = null;
    if ( $fid > 0 ) {
      $result = db_query('SELECT * FROM {file_managed} WHERE fid = :fid', array(':fid' => $fid));
      $fileObj = $result->fetchObject();
    }
    else {
      $data = base64_decode($file['contents']);
      $fileObj = ww_enterprise_createFile($data, $file['name'] . $file['ext'], $file['type']);
    }
    $id = 0;
    if (isset($imageTypes[$file['type']])) {
      $inode = null;
      // it's an image
      $id = ww_enterprise_attachImage($file, $fileObj, $node, $inode);

      $imageNodes[] = $inode;
    }
    else {
      // not an image, set as attachment
      $id = ww_enterprise_attachFile($file, $fileObj, $node);
    }
    $idArray[$file['enterprise_id']] = $id;
    ww_enterprise_setKeywords($keywords, $file['keywords']);
  }
}

/**
 * Import text elements in Drupal
 *
 * @param array $dossierProps
 * @param array $textElements
 * @param int $publish
 * @param int $promote
 * @param object $oldNode
 * @param array $fileAttachments
 * @param array $keywords
 * @param array $idArray
 * @param array $elements
 * @param array $options
 * @param array $entUser
 * @param array $extraMetaData
 * @param array $dialogFields
 * @return object node or null if there's an error
 */
function importTextElements($dossierProps, $textElements, $publish, $promote, $oldNode, $fileAttachments, &$keywords, &$idArray = array(), $elements = array(), $options = array(), $entUser = array(), $extraMetaData = array(), $dialogFields = array()) {
  global $user;

  // Walk thru text elements to get head and body:
  $head = null;
  $teaser = null;
  $body = null;
  $writer = null;
  $author = null;

  if (isset($options['writer']) && $options['writer'] != 'none') {
    $author = getUsername($entUser);
  }

  if (is_null($author)) {
    $author = new stdClass();
    $author->uid = $user->uid;
    $author->name = $user->name;
  }

  if (!isset($elements['title']) || !isset($elements['body']) || !isset($elements['teaser'])) {
    throw new Exception(t('Cannot find the components mapping for title, body or teaser!'));
  }

  foreach ($textElements as $te) {
    if ( array_key_exists($elements['body'], $te ) ) {
      $body = $te[$elements['body']];
    }
    else if ( array_key_exists($elements['title'], $te ) ) {
      $head = strip_tags($te[$elements['title']]);
    }
    else if ( array_key_exists($elements['teaser'], $te ) ) {
      $teaser = $te[$elements['teaser']];
    }
    ww_enterprise_setKeywords($keywords, $te['keywords']);
  }

  // If no explicit head specified we fallback on description or name:
  if (is_null($head)) {
    $fallback = $options['title_fallback'];
    $fallback = (!empty($fallback)) ? explode('/', $fallback) : array('description', 'name');

    foreach ($fallback as $type) {
      $type = ucfirst($type);
      if ( isset($dossierProps[$type]) && !empty($dossierProps[$type]) ) {
        $head = $dossierProps[$type];
        break;
      }
    }
  }

  if (is_null($body)) {
    $body = '';
  }

  if (is_null($head) || empty($head)) {
    throw new Exception(t('Cannot publish node with an empty head!'));
  }

  // Drupal body is teaser plus body seperated by "<!--break-->"
  if (!empty($teaser)) {
    $body = $teaser . "\n<!--break-->\n" . $body;
  }

  // find taxonomy
  $taxonomy = array();
  if (isset($extraMetaData['drupal_terms'])) {
    foreach ($extraMetaData['drupal_terms'] as $termdata) {
      $term = explode('-', $termdata);
      $taxonomy[] = $term[1];
    }
  }

  // get the optional settings from enterprise
  if (isset($options['taxonomy']) && is_array($options['taxonomy'])) {
    foreach ($options['taxonomy'] as $name => $value) {
      if (!empty($value) && !empty($name)) {
        $vocId = resolveVocabularyId($name);
        if ($vocId != 0) {
          if ($value != 'null') {
            $value = explode(",", $value);
            if (isset($taxonomy['tags'][$vocId])) {
              $value = array_merge(explode(",", $taxonomy['tags'][$vocId]), $value);
            }
            $taxonomy['tags'][$vocId] = implode(",", $value);
          }
        }
      }
    }
  }

  // Getting the keywords and description
  $metatags = array();
  if (isset($options['keywords']) && !empty($options['keywords'])) {
    $metatags['keywords']['value'] = $options['keywords'];
  }
  if (isset($options['description']) && !empty($options['description'])) {
    $metatags['description']['value'] = $options['description'];
  }

  // If the metatags are set check if the necassary plugin is active
  if (!empty($metatags)) {
    if (!module_exists("nodewords")) {
      throw new Exception(t('Could not find module "%module" needed for the meta-tags', array('%module' => 'nodewords')));
    }
  }

  if (isset($options['pagetitle']) && !empty($options['pagetitle'])) {
    if (!module_exists("page_title")) {
      throw new Exception(t('Could not find module "%module" needed for the custom page titles', array('%module' => 'page_title')));
    }
  }

  if (isset($options['urlpath']) && !empty($options['urlpath'])) {
    if (!module_exists("path")) {
      throw new Exception(t('Could not find module "%module" needed for the custom url path', array('%module' => 'path')));
    }
  }

  // Determine content type
  $type = (isset($extraMetaData['drupal_content_type'][0]) && !empty($extraMetaData['drupal_content_type'][0])) ? $extraMetaData['drupal_content_type'][0] : WW_ENTERPRISE_CONTENT_TYPE;

  $count = db_query("SELECT COUNT(*) FROM {node_type} WHERE type = :type", array(':type' => $type))->fetchField();
  if ($count < 1) {
    throw new Exception(t('Could not find content type "%type"', array('%type' => $type)));
  }

  // If promote is not set we get default from content type:
  $node_options = variable_get('node_options_' . $type, array());
  $promoteDefault = in_array('promote', $node_options);
  $stickyDefault = in_array('sticky', $node_options);
  $commentDefault = variable_get('comment_' . $type, 0);

  if ($oldNode) {
    // Update node
    $node = $oldNode;
    $node->type = $type;
    $node->status = $publish;
    //$node->promote = $promote; // Is set on Enterprise side now, if not set use content type default
    $node->title = $head;
    $node->body = $body;
    $node->teaser = $teaser;
    $node->writer = $writer;
    $node->taxonomy = $taxonomy;
    $node->changed = REQUEST_TIME;

    if (!is_null($author)) {
      $node->uid = $author->uid;
      $node->name = $author->name;
    }

    if (isset($options['pagetitle']) && !empty($options['pagetitle'])) {
      $node->page_title = $options['pagetitle'];
    }

    if (isset($dialogFields['dialog_promote'][0])) {
      $node->promote = ($dialogFields['dialog_promote'][0] == '1' || $dialogFields['dialog_promote'][0] == 'true') ? 1 : 0;
    }
    elseif (isset($options['promote']) && $options['promote'] != "" && $promote != '0') {
      $node->promote = ($options['promote'] == '1') ? 1 : 0;
    }
    else {
      $node->promote = $promoteDefault;
    }

    if (isset($dialogFields['dialog_sticky'][0])) {
      $node->sticky = ($dialogFields['dialog_sticky'][0] == '1' || $dialogFields['dialog_sticky'][0] == 'true') ? 1 : 0;
    }
    elseif (isset($options['sticky']) && $options['sticky'] != "") {
      $node->sticky = ($options['sticky'] == '1') ? 1 : 0;
    }
    else {
      $node->sticky = $stickyDefault;
    }

    if (isset($dialogFields['dialog_comments'][0]) && !empty($dialogFields['dialog_comments'][0])) {
      $commentOption = getComments($dialogFields['dialog_comments'][0]);
      $node->comment = $commentOption;
    }
    elseif (isset($options['comments']) && !empty($options['comments'])) {
      $commentOption = getComments($options['comments']);
      $node->comment = $commentOption;
    }
    else {
      $node->comment = $commentDefault;
    }

    if (!empty($metatags)) {
      // First delete the current metatags from the 'nodewords' table
      // TODO Please review the conversion of this statement to the D7 database API syntax.
      /* db_query("DELETE FROM {nodewords} WHERE id = '%s'", $node->nid) */
      db_delete('nodewords')
  ->condition('id', $node->nid)
  ->execute();
      $node->nodewords = $metatags;
    }

    if (isset($options['urlpath']) && !empty($options['urlpath'])) {
      $node->path = $options['urlpath'];
    }

  }
  else {
    // new node
    $edit = array(// this is the node array used with node_save call
      'type' => $type, // type of the node
      'uid' => $author->uid, // user id who published it
      'name' => $author->name, // username who published it, we need it because $user can be administrator
      'status' => $publish, // status (publish / do not publish)
      //'promote' => $promote, // show on title page // Is set on Enterprise side now, if not set use content type default
      'title' => $head, // header
      'body' => $body, // body
      'teaser' => $teaser, // teaser
      'writer' => $writer, // writer
      'taxonomy' => $taxonomy, // category
      'changed' => REQUEST_TIME,
    );
   
    if (isset($options['pagetitle']) && !empty($options['pagetitle'])) {
      $edit['page_title'] = $options['pagetitle'];
    }

    if (isset($dialogFields['dialog_promote'][0])) {
      $edit['promote'] = ($dialogFields['dialog_promote'][0] == '1' || $dialogFields['dialog_promote'][0] == 'true') ? 1 : 0;
    }
    elseif (isset($options['promote']) && $options['promote'] != "" && $promote != '0') {
      $edit['promote'] = ($options['promote'] == '1') ? 1 : 0;
    }
    else {
      $edit['promote'] = $promoteDefault;
    }

    if (isset($dialogFields['dialog_sticky'][0])) {
      $edit['sticky'] = ($dialogFields['dialog_sticky'][0] == '1' || $dialogFields['dialog_sticky'][0] == 'true') ? 1 : 0;
    }
    elseif (isset($options['sticky']) && $options['sticky'] != "") {
      $edit['sticky'] = ($options['sticky'] == '1') ? 1 : 0;
    }
    else {
      $edit['sticky'] = $stickyDefault;
    }

    if (isset($dialogFields['dialog_comments'][0]) && !empty($dialogFields['dialog_comments'][0])) {
      $commentOption = getComments($dialogFields['dialog_comments'][0]);
      $edit['comment'] = $commentOption;
    }
    elseif (isset($options['comments']) && !empty($options['comments'])) {
      $commentOption = getComments($options['comments']);
      $edit['comment'] = $commentOption;
    }
    else {
      $edit['comment'] = $commentDefault;
    }

    if (!empty($metatags)) {
      $edit['nodewords'] = $metatags;
    }

    if (isset($options['urlpath']) && !empty($options['urlpath'])) {
      $edit['path'] = $options['urlpath'];
    }
    $form_state = array();
    // validate node
    node_validate($edit, array(), $form_state); 
    $errors = form_get_errors();
    if ( $errors ) {
      throw new Exception(t('Error validating node: %errors', array('%errors' => implode("\n", array_values($errors)))));
    }

    // submit node.
    $node = node_submit((object)$edit); 
  }

  $imageNodes = array();
  // Handle the attachements
  ww_enterprise_attachFiles($fileAttachments, $idArray, $keywords, $node, $imageNodes);
  //Cleanup non-referred images
  //@TODO:remove the image attache.
//  return ;
//   $result = db_query("SELECT iid FROM {image_attach} WHERE nid = :nid AND iid > :iid", array(':nid' => $node->nid, ':iid' => 0));
//   foreach ($result as $r) {
//     $imageId = strval($r->iid);
//     if (!in_array($imageId, $node->iids)) {
//       node_delete($r->iid);
//     }
    
//   }

//   if ( count($idArray) > 0 && count($imageNodes) > 0 ) {
//     // parse enterprise image URL's to valid drupal URL's
//     ww_enterprise_parse_images( $node, $idArray, $imageNodes );
//     $node = node_submit($node);
//   }

  node_save($node); //... and save it so we have node id

  return $node;
}

function getComments($value) {
  $comments = 0;
  switch ($value) {
    case 'read':
      $comments = 1;
      break;
    case 'read/write':
      $comments = 2;
      break;
    default:
      $comments = 0;
  }

  return $comments;
}

/**
 * Gets the user objects if an user with the given Enterprise user or fullname is found.
 *
 * @param array $entUser
 * @return object user - if user is not found use logged in user
 */
function getUsername($entUser) {
  global $user;
  $author = NULL;
  if (!empty($entUser)) {

    $username = $entUser['user'];
    $fullname = $entUser['fullname'];

    $count = db_query("SELECT COUNT(*) FROM {users} WHERE name = :name", array(':name' => $username))->fetchField();

    if ($count == 1) {
      $result = db_query("SELECT uid, name FROM {users} WHERE name = :name", array(':name' => $username));
      foreach ($result as $r) {
        $author = new stdClass();
        $author->uid = $r->uid;
        $author->name = $r->name;
      }
    }

    if (is_null($author)) {
      $count = db_query("SELECT COUNT(*) FROM {users} WHERE name = :name", array(':name' => $fullname))->fetchField();

      if ($count == 1) {
        $result = db_query("SELECT uid FROM {users} WHERE name = :name", array(':name' => $fullname));
        foreach ($result as $r) {
          $author = new stdClass();
          $author->uid = $row->uid;
          $author->name = $row->name;
        }
      }
    }
  }

  if (empty($author)) {
    $author = new stdClass();
    $author->uid = $user->uid;
    $author->name = $user->name;
  }

  return $author;
}

/**
 * Resolves the vocabulary name to the id
 *
 * @param string $name
 * @return int vocabulary id (vid) if not found returns 0
 */
function resolveVocabularyId($name) {
  $vid = 0;

  $result = db_query("SELECT vid FROM {taxonomy_vocabulary} WHERE name = :name", array(':name' => $name));
  foreach ($result as $r) {
    $vid = $row->vid;
  }

  return $vid;
}

/**
 * Return the (preview) URL of the node
 *
 * @param int $nid node id
 * @param boolean $preview true if preview URL else false
 * @param string $hash if it is a preview send the unique hash (only needed for previews)
 * @return string complete URL
 */
function _ww_enterprise_getURL($nid, $preview, $hash = '') {
  // build url
  global $base_url;

  // remove :80 from base url, xmlrpc client on Enterprise side adds this to SERVER_HOST :(
  $url = preg_replace('|^http://([^/]*):80/|', 'http://$1/', $base_url, 1);

  if ( $nid == null ) {
    return $url;
  }

  if ($preview) {
    $url .= (variable_get('clean_url', "") == "1") ? '/' : '/?q=';
    $url .= 'node/' . $nid . '/' . $hash;
  }
  else {
    if (module_exists("pathauto") || module_exists("path")) {
      $result = db_query("SELECT dst FROM {url_alias} WHERE src = :src", array(':src' => 'node/' . $nid));
      $alias = $result->fetchObject();
      if (!empty($alias->dst)) {
        $url .= '/' . ((variable_get('clean_url', "") == "1") ? '' : '?q=') . $alias->dst;
      }
      else {
        if (variable_get('clean_url', "") == "1") {
          $url .= '/node/' . $nid;
        }
        else {
          $url .= '/?q=node/' . $nid;
        }
      }
    }
    else {
      if (variable_get('clean_url', "") == "1") {
        $url .= '/node/' . $nid;
      }
      else {
        $url .= '/?q=node/' . $nid;
      }
    }
  }

  return $url;
}

/**
 * Insert new Drupal text node. Create image nodes. Link image nodes to newly created text node.
 *
 * @param array $logOnParams
 * @param array $dossierProps
 * @param array $textelements
 * @param array $images
 * @param array $fileAttachments
 * @param array $audios
 * @param array $hyperlinks
 * @param int $promote
 * @param int $publish
 * @param array $user
 * @param array $extraMetaData
 * @param array $options
 * @param boolean $preview
 * @param array $dialogFields
 *
 * @return array
 * Returns array:
 * nodeId - ID of newly created Drupal node
 * imagesIdArray - array of IDs of newly created Image nodes: $iid => $filename
 *
 */

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function ww_enterprise_xmlrpc_nodePublish($logOnParams, $dossierProps, $textelements, $images, $fileAttachments, $audios, $hyperlinks, $promote, $publish, $user, $extraMetaData, $options, $preview, $dialogFields) {
  // keep analyzer happy
  $audios = $audios;
  $images = $images;
  $hyperlinks = $hyperlinks;

  $result = null;

  try {
    ww_enterprise_logOn($logOnParams);

    deleteOldPreviews();
    if ($promote == "2") {
      $promote = "0";
    }

    // id array that maps Enterprise ids to Drupal ids
    $idArray = array();
    // array to keep unique keywords ( each entry like "keyword"=> 1 )
    $keywords = array();

    $elements = $options['components'];

    $node = importTextElements($dossierProps, $textelements, $publish, $promote, null, $fileAttachments, $keywords, $idArray, $elements, $options, $user, $extraMetaData, $dialogFields);

    if ($node) {
      $hash =  md5(rand());
      if ($preview) {
        $data = array(
          'vid' => $node->vid,
          'nid' => $node->nid,
          'hash' => $hash,
          'date' => REQUEST_TIME,
        );
        drupal_write_record('ww_enterprise_preview', $data);
      }

      watchdog('content', 
				t('@type: inserted %title.', 
					array('@type' => t($node->type), '%title' => $node->title)), array(), 
				WATCHDOG_NOTICE, l(t('view'), 'node/' . $node->nid));

      $url = _ww_enterprise_getURL($node->nid, $preview, $hash);

      $result = array(
        'nodeId' => $node->nid,
        'url' => $url,
        'idArray' => $idArray,
      );
    }
  }
  catch (Exception $e) {
    watchdog('content', $e->getMessage(), array(), WATCHDOG_ERROR);
    $result = array('Errors' => array($e->getMessage()));
  }

  return $result;
}

/**
 * Get all <img> elements from the body of the node, which have an id that starts with "ent_"
 * Replace their (enterprise internal) src with a drupal src.
 *
 * @param object $node
 * @param array $idArray
 * @param array $imageNodes
 */
function ww_enterprise_parse_images( &$node, $idArray, &$imageNodes ) {
  $ww_images = array();
  $ww_newimages = array();

  watchdog('content', 'Parsing images', array(), WATCHDOG_NOTICE);

  // regular express our way through every enterprise image object.
  $pattern = '/<img[^>]*id=\"ent_([^\"]*)[^>]*src=\"([^\"]*)[^>]*>/i';

  $types = array('teaser', 'body');

  foreach ($types as $type) {
    $pattern_result = array(); // elements: 0 = the full image element (<img>), 1 = the image id (without the "ent_" prefix), 2 = the image src.

    preg_match_all( $pattern, $node->$type, $pattern_result );

    for ($i = 0; $i < count($pattern_result[0]); $i++) {
      $ww_images[] = $pattern_result[0][$i]; // copy the found image to ww_images array
      $ww_newimage_id = $idArray[$pattern_result[1][$i]];
      $ww_newimage_src = "";

      foreach ( $imageNodes as $imageNode ) {
        if ( $imageNode->nid == $ww_newimage_id ) {
          $ww_newimage_src = _ww_enterprise_getURL(null, false) . "/" . $imageNode->images["_original"];
          // remove the image id for the image attach module
          if (isset($node->iid) && $node->iid == $imageNode->nid) {
            unset($node->iid);
          }
          // remove the image id from the iids array (new way to attach images)
          if (isset($node->iids) && is_array($node->iids)) {
            foreach ($node->iids as $key => $imageId) {
              if ($imageId == $imageNode->nid) {
                unset($node->iids[$key]);
              }
            }
          }
        }
      }

      $ww_newimages[] = str_replace($pattern_result[2][$i], $ww_newimage_src, $pattern_result[0][$i]);
    }

    for ($i = 0; $i < count($ww_images); $i++) {
      $node->$type = str_replace($ww_images[$i], $ww_newimages[$i], $node->$type);
    }
  }
}


/**
 * Update existing Drupal text node. Create or update image nodes. Link these image nodes to Drupal node.
 *
 * @param array $logOnParams
 * @param int $nid
 * @param object $dossierProps
 * @param array $textelements
 * @param array $images
 * @param array $otherFiles
 * @param array $user
 * @param array $extraMetaData
 * @param array $options
 * @param array $dialogFields
 * @return array
 */
function ww_enterprise_xmlrpc_nodeUpdate($logOnParams, $nid, $dossierProps, $textelements, $images, $otherFiles, $user, $extraMetaData, $options, $dialogFields) {
  // keep analyzer happy
  watchdog('yuval', 'nodeupdate');
  $images = $images;

  $result = null;

  try {
    ww_enterprise_logOn($logOnParams);

    // check if node exists
    $node = node_load($nid);

    if (!$node) {
      throw new Exception(t('Could not find node'));
    }
    // id array that maps Enterprise ids to Drupal ids
    $idArray = array();
    // array to keep unique keywords ( each entry like "keyword"=> 1 )
    $keywords = array();

    $elements = $options['components'];

    $node = importTextElements($dossierProps, $textelements, '1', null, $node, $otherFiles, $keywords, $idArray, $elements, $options, $user, $extraMetaData, $dialogFields);

    if ($node) {
      watchdog('content', 
				t('@type: updated %title.', 
					array('@type' => t($node->type), '%title' => $node->title)), array(), 
				WATCHDOG_NOTICE, l(t('view'), 'node/' . $node->nid));

      $result = array(
        'nodeId' => $node->nid,
        'idArray' => $idArray,
      );
    }
  }
  catch (Exception $e) {
    watchdog('content', $e->getMessage(), array(), WATCHDOG_ERROR);
    $result = array('Errors' => array($e->getMessage()));
  }
  watchdog('yuval', print_r($r, true));
  return $result;
}

/**
 * Get the node info for the given node id. Returns views, rating, raters, commentscount, comments and the URL if
 * the appropriete modules are found.
 *
 * @param int $nid
 * @return array
 */
function ww_enterprise_xmlrpc_nodeGetInfo($nid) {
  $result = array(
    'Views' => 0,
    'Rating' => null,
    'Raters' => 0,
    'CommentsCount' => 0,
    'Comments' => array(),
    'URL' => '',
  );
  // get statistics
  if (module_exists('statistics')) {
    $statistics = statistics_get($nid);
    if ($statistics) {
      $result['Views'] = $statistics['totalcount'];
      // extra property, not fully supported in Content Station
      $result['DayViews'] = intval($statistics['daycount']);
    }
  }
  else {
    $result['Views'] = "N/A";
  }

  // get comments
  if (module_exists('comment')) {
    $node = node_load($nid);
    $result['CommentsCount'] = $node->comment_count;
    $qr = db_query('SELECT cid FROM {comment} WHERE nid = :nid ORDER BY cid', array(':nid' => array($nid)));
    foreach ($qr as $r) {
      $c = entity_metadata_wrapper('comment', $r->cid);
      $comment_body = $c->comment_body->value(); 
      $result['Comments'][] = $comment_body['safe_value'];
    }
  }
  else {
    $result['CommentsCount'] = "N/A";
    $result['Comments'] = "N/A";
  }

  // get rating
  if (module_exists('votingapi')) {
    $votes = votingapi_select_results(
			array(
      'content_type' => 'node',
      'content_id' => $nid,
      'value_type' => 'percent',
      'tag' => 'vote',
    ));
    foreach ($votes as $vote) {
      if ($vote['function'] == 'average') {
        // scale from 0 to 5 in Enterprise
        $result['Rating'] = ($vote['value'] / 100) * 5;
      }
      else if ($vote['function'] == 'count') {
        $result['Raters'] = $vote['value'];
      }
    }
  }
  else {
    $result['Rating'] = "N/A";
    $result['Raters'] = "N/A";
  }

  // get URL
  $result['URL'] = _ww_enterprise_getURL($nid, false);

  return $result;
}

/**
 * Unpublish a node
 *
 * @param array $logOnParams
 * @param int $nid
 * @param array $imageIDs
 * @param array $dialogFields
 * @return array with occured errors
 */
function ww_enterprise_xmlrpc_nodeUnpublish($logOnParams, $nid, $imageIDs, $dialogFields) {
  $result = $nid;

  try {
    ww_enterprise_logOn($logOnParams);

    // for now delete all images
    foreach ($imageIDs as $imageID) {
      node_delete($imageID);
    }

    //Load the node to check if there are comments
    $node = node_load($nid);

    if (isset($dialogFields["dialog_unpublish_node"][0])) {
      $remove = (isset($dialogFields["dialog_unpublish_node"][0]) && $dialogFields["dialog_unpublish_node"][0] == 'remove') ? true : false;
      if (!$remove) {
        //Unpublish node to store the comments
        node_unpublish_action($node);
        node_save($node);
      }
      else {
        if (is_int($node->iid) && $node->iid > 0) {
          // delete attached image node
          node_delete($node->iid);
        }

        if (isset($node->iids) && !empty($node->iids)) {
          foreach ($node->iids as $imageId) {
            node_delete($imageId);
          }
        }

        // delete main node
        node_delete($nid);
      }
    }
    else {
      if ($node->comment_count > 0) {
        //Unpublish node to store the comments
        node_unpublish_action($node);
        node_save($node);
      }
      else {
        if (is_int($node->iid) && $node->iid > 0) {
          // delete attached image node
          node_delete($node->iid);
        }

        // delete main node
        node_delete($nid);
      }
    }
  }
  catch (Exception $e) {
    watchdog('content', $e->getMessage(), array(), WATCHDOG_ERROR);
    $result = array('Errors' => array($e->getMessage()));
  }

  return $result;
}

/**
 * Test the Drupal configuration.
 * This function tests only the logon parameters now. Also the version of the ww_enterprise module is send back.
 *
 * @param array $logOnParams
 * @return array
 */
function ww_enterprise_xmlrpc_testConfig($logOnParams) {
  $result = array();

  try {
    ww_enterprise_logOn($logOnParams);
  }
  catch (Exception $e) {
    watchdog('content', $e->getMessage(), array(), WATCHDOG_ERROR);
    $result = array('Errors' => array($e->getMessage()));
  }

  if (!isset($result['Errors'])) {
    $result = db_query("SELECT info infodb FROM {system} WHERE name = :name AND type = :type", array(':name' => 'ww_enterprise', ':type' => 'module'));
    if ($result) {
      $moduleinfo = unserialize($result->infodb);
      if (isset($moduleinfo['version'])) {
        $result = array('Version' => $moduleinfo['version']);
      }
    }
  }

  return $result;
}

/**
 * Implements hook_menu().().
 */
function ww_enterprise_menu() {
  $items['ww_enterprise/%node/%'] = array(
    'title callback' => 'ww_enterprise_title',
    'title arguments' => array(1),
    'page callback' => 'ww_enterprise_page_view',
    'page arguments' => array(1),
    'access callback' => 'ww_enterprise_preview_access',
    'access arguments' => array('preview', 1, 2),
    'type' => MENU_CALLBACK,
  );

  // Handle file uploads
  $items['ww_enterprise/upload'] = array(
    'page callback' => 'ww_enterprise_upload',
    'access callback' => 'ww_enterprise_page_access',
    'access arguments' => array('upload', 1),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_access().().
 */
function ww_enterprise_page_access($op, $node, $account = NULL) {
  //TODO check if requested from Enterprise server
  $op = $op;
  $node = $node;
  $account = $account;

  return TRUE;
}

/**
 * Implements hook_menu(). For previews.().
 */
function ww_enterprise_preview_access($op, $node, $hash, $account = NULL) {
  $op = $op;
  $account = $account;

  $nid = $node->nid;

  watchdog('content', "ww_enterprise_preview_access", array(), WATCHDOG_NOTICE);
  watchdog('content', "Searching access for nid: $nid and hash: $hash", array(), WATCHDOG_NOTICE);

  $result = db_query("SELECT * FROM {ww_enterprise_preview} WHERE nid = :nid AND hash = :hash", array(':nid' => $nid, ':hash' => $hash));
  foreach ($result as $r) {
    watchdog('content', "Access granted", array(), WATCHDOG_NOTICE);
    return TRUE;
  }
  
  watchdog('content', "Access NOT granted", array(), WATCHDOG_NOTICE);
  return FALSE;
}

/**
 * Title callback.
 */
function ww_enterprise_title($node) {
  return $node->title;
}

/**
 * Menu callback; view a single node.
 */
function ww_enterprise_page_view($node, $cid = NULL) {
  //TODO generate random key and check it here as identification
  $return = null;
  $return = $return; // keep analyzer happy
  // login as Enterprise user to show unpublished images too
  global $user;
  // backup user
  $userBackup = $user;
  try {
    $account = user_load($node->uid);
    user_external_login($account);
    drupal_set_title($node->title);
    $return = node_show($node, $cid);
  }
  catch (Exception $e) {
    watchdog('content', $e->getMessage(), array(), WATCHDOG_ERROR);
  }

  // restore user
  $user = $userBackup;

  return $return;
}

/**
 * Save files to Drupal system
 *
 * @param array $files
 * @return array of file objects with fid as keys
 */
function ww_enterprise_saveFiles(array $files) {
  $result = array();

  foreach ($files as $file) {
    // attach file
    // check if file has been uploaded already
    $fid = isset($file['fid']) ? intval($file['fid']) : 0;
    if ( $fid > 0 ) {
      $result = db_query('SELECT * FROM {files} WHERE fid = :fid', array(':fid' => $fid));
      $fileObj = $result->fetchObject();
    }
    else {
      $data = base64_decode($file['contents']);
      $fileObj = ww_enterprise_create_file($data, $file['name'] . $file['ext'], $file['type']);
    }
    // extra properties for upload module
    $fileObj->list = 1;
    $fileObj->new = TRUE;
    $result[$fileObj->fid] = $fileObj;
  }

  return $result;
}

/**
 * Creates a file of the given data and filename.
 *
 * @param string $data
 * @param string $fileName
 * @param string $fileType
 * @return object
 */
function ww_enterprise_createFile($data, $fileName, $fileType) {
  global $user;

  $fileObj = new stdClass();
  $fileObj->filename = $fileName; //$file['name'] . $file['ext'];
  $filePath = file_save_data($data, 
	file_create_filename($fileObj->filename, file_directory_path()));
  $fileObj->fid = 0;
  $fileObj->uid = $user->uid;
  $fileObj->filepath = $filePath;
  $fileObj->filemime = $fileType; //$file['type'];
  $fileObj->filesize = strlen($data);
  $fileObj->status = ~FILE_STATUS_PERMANENT;
  $fileObj->timestamp = REQUEST_TIME;
  drupal_write_record('files', $fileObj);

  return $fileObj;
}

/**
 * Seperate function to handle file upload via a HTTP post request.
 * This is faster than sending the files through XMLRPC
 * Prints the data as XML so it can be parsed on Enterprise side.
 *
 */
function ww_enterprise_upload() {
  $dom = new DOMDocument('1.0', 'UTF-8');
  $uploadResponseEl = $dom->createElement('UploadResponse');
  try {
    ww_enterprise_logOn($_POST);
    $file = file_save_upload('upload', array(), file_directory_path());
    $fidEl = $dom->createElement('fid');
    $fidEl->appendChild($dom->createTextNode($file->fid));
    $uploadResponseEl->appendChild($fidEl);
  }
  catch (Exception $e) {
    watchdog('content', $e->getMessage(), array(), WATCHDOG_ERROR);
    $errEl = $dom->createElement('error');
    $errEl->appendChild($dom->createTextNode($e->getMessage()));
    $uploadResponseEl->appendChild($errEl);
  }
  $dom->appendChild($uploadResponseEl);
  print $dom->saveXML();
}

/**
 * Looks for the filename in the database in case of an update. This so big uploads of the same version don't need to be send again.
 *
 * @param array $file
 * @return array
 */
function ww_enterprise_xmlrpc_getFileId($file) {
  $filename = $file['filename'];
  $contentType = $file['contentType'];
  $nodeId = $file['nodeId'];

  static $imageTypes = array(
    'image/jpeg' => true,
    'image/jpg' => true,
    'image/gif' => true,
    'image/png' => true,
  );

  $query = "";
  if (isset($imageTypes[$contentType])) {
    //@TODO:fix the immage attach
    //$query = "SELECT f.fid fileid, f.filename, 'image' type FROM {files} f JOIN {image} i ON f.fid = i.fid JOIN {image_attach} ia ON i.nid = ia.iid AND ia.nid = %d WHERE f.filename = '_original' AND f.filepath LIKE '%%%s%%'";
    //Change the file name so we can search without the suffix
    //$filename = preg_replace("/\\.([^.]+)$/", "", $filename);
  }
  else {
    $query = "SELECT f.fid fileid, f.filename, 'other' type FROM {files} f JOIN {upload} u ON f.fid = u.fid AND u.nid = %d WHERE f.filename = '%s'";
  }

  $info = array();

  $result = db_query("SELECT f.fid fileid, f.filename, 'other' type FROM {files} f JOIN {upload} u ON f.fid = u.fid AND u.nid = %d WHERE f.filename = :f.filename", array(':f.filename' => $nodeId, '' => $filename));
  while ($data = db_fetch_array($result)) {
    $info[] = $data;
  }

  return $info;
}

/**
 * Get the content types and return these in a array
 *
 * @param array $logOnParams
 * @return array
 */
function ww_enterprise_xmlrpc_getContentTypes($logOnParams) {
  ww_enterprise_logOn($logOnParams);

  $info = array();

  $result = db_query("SELECT * FROM {node_type} ORDER BY name ASC");
  while ($data = $result->fetchAssoc()) {
    $info[] = $data;
  }

  return $info;
}

/**
 * Get the vocabularies for a content type and return these in a array
 *
 * @param array $logOnParams
 * @param string $contentType
 * @return array
 */
function ww_enterprise_xmlrpc_getVocabularies($logOnParams, $contentType) {
  ww_enterprise_logOn($logOnParams);
  $fields_info = field_info_fields();
  $voc_names = array();
  foreach ($fields_info as $f) {
    if (($f['module'] == 'taxonomy') && (in_array( $contentType, $f['bundles']['node']))) {
      $voc_names[] = $f['settings']['allowed_values'][0]['vocabulary'];
    } 
  }
  $info = array();

  $query = "SELECT * FROM {taxonomy_vocabulary} v where name in (:name)";
  $result = db_query($query, array(':name' => $voc_names));
  return $result->fetchAllAssoc('vid', PDO::FETCH_ASSOC);

//   if (!empty($contentType)) {
//     $query .= " JOIN {taxonomy_vocabulary_node_type} vnt ON v.vid = vnt.vid AND vnt.type = :content_type AND v.module = 'taxonomy'";
//     watchdog('content', 'Getting data for content type: ' . $contentType, array(), WATCHDOG_NOTICE);
//     $query .= $orderBy;
//     // TODO Please convert this statement to the D7 database API syntax.
//     $result = db_query($query, array(':content_type' => $contentType));
//   }

//   while ($data = $result->fetchAssoc()) {
//     $info[] = $data;
//   }

//   return $info;
}

/**
 * Get the terms for the given vocabularies and return these as a array
 *
 * @param array $logOnParams
 * @param array $vocabularies
 * @return array
 */
function ww_enterprise_xmlrpc_getTerms($logOnParams, $vocabularies) {
  ww_enterprise_logOn($logOnParams);

  $terms = array();
  foreach ($vocabularies as $voc) {
    $result = db_query("SELECT vid FROM {taxonomy_vocabulary} WHERE name = :name ORDER BY name ASC", array(':name' => $voc));
    $obj = $result->fetchObject(); 
    $tree = taxonomy_get_tree($obj->vid);
    $terms[$voc] = $tree;
  }

  return $terms;
}

/**
 * Get the url of the given node id
 *
 * @param string $nodeId
 * @return string with the url
 */
function ww_enterprise_xmlrpc_getUrl($nodeId) {
  return _ww_enterprise_getURL(intval($nodeId), false);
}

/**
 * Get the values for the requested params
 * If no nodeId is given, get the default values are returned
 * otherwise the set variables are returned
 *
 * @param array $logOnParams
 * @param int $nodeId
 * @param string $contentType
 * @param array $params
 * @return array
 */
function ww_enterprise_xmlrpc_getCurrentDataForGetDialog($logOnParams, $nodeId, $contentType, $params) {
  ww_enterprise_logOn($logOnParams);

  $commentTypes = array('disabled', 'read', 'read/write');

  if (empty($contentType)) {
    $contentType = WW_ENTERPRISE_CONTENT_TYPE;
  }

  $data = array();

  if (empty($nodeId)) {
    // If promote is not set we get default from content type:
    $node_options = variable_get('node_options_' . $contentType, array());

    foreach ($params as $param) {
      switch ($param) {
        case 'C_DIALOG_DRUPAL_PROMOTE':
          $data[$param] = in_array('promote', $node_options);
          break;
        case 'C_DIALOG_DRUPAL_STICKY':
          $data[$param] = in_array('sticky', $node_options);
          break;
        case 'C_DIALOG_DRUPAL_COMMENTS':
          $data[$param] = $commentTypes[variable_get('comment_' . $contentType, 0)];
          break;
      }
    }
  }
  else {
    $node = node_load($nodeId);

    if (!$node) {
      throw new Exception(t('Could not find node.'));
    }

    foreach ($params as $param) {
      switch ($param) {
        case 'C_DIALOG_DRUPAL_PROMOTE':
          $data[$param] = $node->promote;
          break;
        case 'C_DIALOG_DRUPAL_STICKY':
          $data[$param] = $node->sticky;
          break;
        case 'C_DIALOG_DRUPAL_COMMENTS':
          $data[$param] = $commentTypes[variable_get('comment_' . $contentType, 0)];
          break;
        case 'C_DIALOG_DRUPAL_PUBLISH_FROM':
          break;
        case 'C_DIALOG_DRUPAL_PUBLISH_TILL':
          break;
      }
    }
  }

  return $data;
}

function yuvaldebug() {
  $args = array();
  ww_enterprise_xmlrpc_getCurrentDataForGetDialog(array('username'=> 'p', 'password' => 'MQ=='), 16, 'ww_enterprise',array('C_DIALOG_DRUPAL_PROMOTE', 'C_DIALOG_DRUPAL_STICKY', 'C_DIALOG_DRUPAL_COMMENTS'));
}